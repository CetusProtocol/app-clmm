import{_ as C,S as A,j as P,ao as v,s as p,D as r,c as B,p as y,b as F}from"./pool.629dd5a6.js";import{$ as R,m as V,L as W,a0 as U}from"./entry.820231df.js";function h(s){const i={fullRpcUrl:localStorage.getItem(`${s}-currentRpc`)||C[s||"Sui"].fullRpcUrl,faucetURL:localStorage.getItem(`${s}-currentRpc`)||C[s||"Sui"].faucetURL,simulationAccount:C[s||"Sui"].simulationAccount,xcetus:C[s||"Sui"].xcetus},e=R(new A(i)),c=P(),u=V(()=>c);W(()=>{u.value.address&&(e.senderAddress=u.value.address)});const l=async t=>await e.XCetusModule.getOwnerLockCetuss(t),f=async(t,n)=>v.getAvailableXCetus(t,n),g=async t=>await e.XCetusModule.getOwnerCetusCoins(t),m=async t=>await e.XCetusModule.getOwnerVeNFT(t),X=async(t,n)=>{const a={amount:t};n&&(a.venft_id=n);const o=await e.XCetusModule.convertPayload(a);return d(o)},w=async()=>{const t=await e.XCetusModule.mintVeNFTPayload();return d(t)},S=async(t,n)=>{const a=await e.XCetusModule.redeemNum(t,n);return{amountOut:a.amountOut,percent:p(new r(a.percent).mul(new r(100)).toString(),2)}},x=async(t,n)=>{const a=await e.XCetusModule.reverseRedeemNum(t,n);return{amountOut:a.amountOut,percent:p(new r(a.percent).mul(new r(100)).toString(),2)}},M=async(t,n,a)=>{const o=await e.XCetusModule.redeemLockPayload({venft_id:n,amount:t,lock_day:a});return d(o)},b=t=>v.getLockingCetuss(t),k=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&v.isLocked(a)){const o=e.XCetusModule.cancelRedeemPayload({venft_id:n,lock_id:t});return d(o)}},_=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&!v.isLocked(a)){const o=await e.XCetusModule.redeemPayload({venft_id:n,lock_id:t});return d(o)}},T=t=>{const n=Date.now()/1e3,a=new r(n).sub(t.start_time).div(new r(t.interval_day).mul(60)).toFixed(0,r.ROUND_UP);return new r(t.start_time).add(new r(a).mul(60*t.interval_day)).toString()},L=async()=>{const t=await e.XCetusModule.getDividendManager();return{nextStartTime:T(t).toString(),...t}},D=async(t,n)=>{const a=await e.XCetusModule.getVeNFTDividendInfo(n.venft_dividends.id,t);return{rewards:a&&a.rewards||[]}},N=async t=>{const n=await e.XCetusModule.getDividendManager();if(n.bonus_types.length>0){const a=await e.XCetusModule.redeemDividendPayload(t,n.bonus_types);return d(a)}},I=async t=>{const n=await e.XCetusModule.getDividendManager();if(n.bonus_types.length>0){const a=await e.XCetusModule.redeemDividendV2Payload(t,n.bonus_types);return d(a)}},O=async t=>{const n=await e.XCetusModule.getOwnerVeNFT(t);if(n){const a=await e.XCetusModule.getXcetusManager(),o=new r(n.xcetus_balance).div(a.treasury).mul(100).toString();return Number(o)>0&&Number(o)<.01?"<0.01":p(o,2)}else return 0},d=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getOwnerLockCetuss:l,getOwnerCetusCoins:g,getOwnerVeNFT:m,depositCetus:X,getMintVeNFTPayload:w,redeemNum:S,getRedeemLockPayload:M,getAvailableXCetus:f,getLockingCetuss:b,getCancelRedeemPayload:k,getVeNFTDividendInfo:D,reverseRedeemNum:x,getRedeemPayload:_,getRedeemDividendPayload:N,getMyShare:O,getDividendManager:L,getPeriod:t=>{const n=Date.now()/1e3,{start_time:a,interval_day:o}=t;return Math.ceil((n-a)/(o*24*3600))},getRedeemDividendV2Payload:I}}const q=U("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(s){const i=h("Sui");try{const e=await i.getOwnerVeNFT(s);e&&!B(e)?(this.venft_id=e.id,this.xWhaleBalance=y(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0")}catch{this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0"}},async getVeNFTDividendInfo(){const s=h("Sui"),i=F("Sui");try{const e=await s.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),c=await s.getPeriod(this.dividendManagerInfo);let u=0;if(e&&e.rewards){for(let l=0;l<e.rewards.length;l++)if(e.rewards[l].period<c){const f=e.rewards[l].rewards;for(let g=0;g<f.length;g++){const m=f[g];let w=(await i.getTokenList()).filter(S=>S.address==m.coin_type)[0];w||(w=(await i.getTokenListByCoinType([m.coin_type]))[0]),this.pendingCoinInfo=w,u+=Number(y(m.amount,w.decimals))}}this.pendingAmount=p(u,6)}else this.pendingAmount="0"}catch{this.pendingAmount="0"}},async getDividendManager(){const i=await h("Sui").getDividendManager();this.nextStartTime=i.nextStartTime,this.dividendManagerInfo=i,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(s){const e=await h("Sui").getOwnerCetusCoins(s);if(e&&e.length>0){let c=new r(0);e.forEach(u=>{c=c.add(y(u.balance.toString(),9))}),this.whaleBalance=c}else this.whaleBalance="0"},async getOwnerLockCetuss(s){const c=(await h("Sui").getOwnerLockCetuss(s)).sort((u,l)=>u.locked_until_time-l.locked_until_time);this.ownerLocks=c,this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const i=await h("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);this.availableXwhale=y(i,9),this.redeemingXwhale=this.xWhaleBalance!=="--"?new r(this.xWhaleBalance).sub(new r(this.availableXwhale)).toString():"--"},async getMyShare(s){const e=await h("Sui").getMyShare(s);this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e},async getXcetusApr(){const{data:s}=await fetch(`${C.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),i=s.apr&&s.apr.replace("%","");this.cetusApr=Number(i)>0&&Number(i)<.01?"<0.01":i},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--"},setClaimLoading(s){this.claimLoading=s}}});export{h as a,q as u};
