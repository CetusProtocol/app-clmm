import{C,L as w}from"./index.145324f4.js";import{v as S,u as O,ae as B}from"./pool.1fd34997.js";import{c,a as R,u as M}from"./sha256.6aacbbe1.js";import{a0 as W,m as f,O as E,a1 as J}from"./entry.bb0651f2.js";function p(e){const r={launchpad:c[e||"Sui"].launchpad,ido:c[e||"Sui"].ido,xcetus:c[e||"Sui"].xcetus,xcetus_dividends:c[e||"Sui"].xcetus_dividends,cetus_faucet:c[e||"Sui"].cetus_faucet,xtoken:c[e||"Sui"].xtoken,xtoken_dividends:c[e||"Sui"].xtoken_dividends,token_faucet:c[e||"Sui"].token_faucet,booster:c[e||"Sui"].booster,maker_bonus:c[e||"Sui"].maker_bonus},n={fullRpcUrl:localStorage.getItem(`${e}-currentRpclocalnew`)||c[e||"Sui"].fullRpcUrl,simulationAccount:c[e||"Sui"].simulationAccount,cetus_config:c[e||"Sui"].cetus_config,clmm_pool:c[e||"Sui"].clmm_pool,integrate:c[e||"Sui"].integrate,deepbook:c[e||"Sui"].deepbook,deepbook_endpoint_v2:c[e||"Sui"].deepbook_endpoint_v2,aggregatorUrl:c[e||"Sui"].aggregatorUrl},s=new S(n),a=W(new C(r,s)),g=R(),h=f(()=>g);E(()=>{h.value.address&&(a.ClmmSDK.senderAddress=h.value.address)});const k=()=>{const t=new S(n);return new C(r,t)},_=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}}),A=M();f(()=>A);const I=O();f(()=>I);const T=async t=>{t.setSenderIfNotSet(h.value.address);const o=await t.build({provider:a.ClmmSDK.fullClient});return await a.ClmmSDK.fullClient.dryRunTransactionBlock({transactionBlock:o})},b=async()=>await a.Launchpad.getPools([]),v=async t=>await a.Launchpad.getPool(t),D=async(t,o)=>{const l=o||await a.Launchpad.getPools(),i=[],d=await a.Launchpad.getPurchaseMarks(t);return l.forEach(y=>{for(const m of d)if(m.pool_id===y.pool_address){i.push(y);break}}),i},U=async(t,o)=>{const l=o||await a.Launchpad.getPools(),i=[];return l.forEach(d=>{d.recipient===t&&i.push(d)}),i},x=async t=>{const o=k();o.ClmmSDK.senderAddress=h.value.address;const l=await o.Launchpad.creatPurchasePayload({pool_address:t.pool.pool_address,purchase_amount:t.amount,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise});return _(l)},K=async t=>{const o=await a.Launchpad.creatClaimPayload({pool_address:t.pool.pool_address,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise});return _(o)},L=async t=>{if(t.pool_status!=="Settle")throw new Error("The pool is not in settle ");let o=null,l=!1;const i=await a.ClmmSDK.Pool.getPoolImmutables();for(const u of i){if(u.coinTypeA===t.coin_type_sale&&u.coinTypeB===t.coin_type_raise&&Number(u.tickSpacing)===t.tick_spacing){o=await a.ClmmSDK.Pool.getPool(u.poolAddress);break}if(u.coinTypeA===t.coin_type_raise&&u.coinTypeB===t.coin_type_sale&&Number(u.tickSpacing)===t.tick_spacing){o=await a.ClmmSDK.Pool.getPool(u.poolAddress),l=!0;break}}const d=await a.ClmmSDK.CetusConfig.getTokenListByCoinTypes([t.coin_type_raise,t.coin_type_sale]),y=d[t.coin_type_sale].decimals,m=d[t.coin_type_raise].decimals;let P;if(t.liquidity_rate>0&&o===null)throw new Error("not found clmmPool ");if(o&&t.liquidity_rate>0)try{P=await a.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise,clmm_args:{current_price:t.current_price,clmm_pool_address:o.poolAddress,clmm_sqrt_price:o.current_sqrt_price.toString(),opposite:l,sale_decimals:y,raise_decimals:m}})}catch{}else P=await a.Launchpad.creatSettlePayload({pool_address:t.pool_address,coin_type_sale:t.coin_type_sale,coin_type_raise:t.coin_type_raise});return P};return{getPoolConfigs:async()=>await a.ClmmSDK.CetusConfig.getLaunchpadPoolConfigs(),getLockNFTList:async t=>{if(t.pool_status=="Ended")return await a.Launchpad.getLockNFTList(t.pool_type,t.recipient)},beforeSettle:L,simulate:T,TickUtil:B,getCmmPoolAddress:async t=>{let o=null;const l=await a.ClmmSDK.Pool.getPoolImmutables();for(const i of l){if(i.coinTypeA===t.coin_type_sale&&i.coinTypeB===t.coin_type_raise&&Number(i.tickSpacing)==Number(t.tick_spacing)){o=await a.ClmmSDK.Pool.getPool(i.poolAddress);break}if(i.coinTypeA===t.coin_type_raise&&i.coinTypeB===t.coin_type_sale&&Number(i.tickSpacing)==Number(t.tick_spacing)){o=await a.ClmmSDK.Pool.getPool(i.poolAddress);break}}return o||null},getLaunchpadAllPools:b,getLaunchpadPoolInfo:v,getJoinPools:D,getOwnerPools:U,getCreatPurchasePayload:x,getCreatClaimPayload:K,getCreatSettlePayload:async t=>{const o=await L(t);return _(o)},getCreatWithdrawParams:async t=>{const o=a.Launchpad.creatWithdrawPayload({pool_address:t.pool.pool_address,coin_type_sale:t.pool.coin_type_sale,coin_type_raise:t.pool.coin_type_raise,sale_amount:t.sale_amount,raise_amount:t.raise_amount});return _(o)},getIsWhiteListUser:async(t,o)=>{var i;return await a.Launchpad.isWhiteListUser((i=t.white_summary)==null?void 0:i.white_handle,o)},getCreatUnlockNftPayload:async(t,o)=>{if(t.pool_status=="Ended"){if(o){const l=a.Launchpad.creatUnlockNftPayload({lock_nft:o.lock_nft_id,nft_type:o.nft_type});return _(l)}}else throw new Error("The pool is not in Ended  ")},getIsAdminCap:async t=>await a.Launchpad.isAdminCap(t),getPurchaseMark:async(t,o)=>await a.Launchpad.getPurchaseMarks(t,[o]),getPurchaseAmountVal:async(t,o)=>await a.Launchpad.getPurchaseAmount(o.white_summary.white_handle,t),getUnusedRaiseAmount:async t=>await w.getHistoryWithdrawRaise(a,t),getUnusedSaleAmount:async t=>await w.getHistoryWithdrawSale(a,t),getCoinInfo:async(t,o)=>await a.ClmmSDK.CetusConfig.getTokenListByCoinTypes([t,o])}}const nt=J("launchpad",{state:()=>({currentLaunchpadPoolInfo:{},launchpadAllPools:[],launchpadOwnerAllPools:[],launchpadJoinPools:[],haveLaunchpad:!1,launchpadPoolsLoading:!0,getOwnDateLoading:!0,ownIsWhiteList:!1,committedCoinAssetCount:"0",currentPoolNumData:{},idoPoolConfigInfo:{},purchaseMark:{},settlePayTokenAInfo:{},settlePayTokenBInfo:{},getPurchaseAmountLoading:!0,currentTab:"latest"}),actions:{async setSettlePayTokenAInfo(e){this.settlePayTokenAInfo=e},async setSettlePayTokenBInfo(e){this.settlePayTokenBInfo=e},async setGetPurchaseAmountLoading(e){this.getPurchaseAmountLoading=e},async setPurchaseMark(e){this.purchaseMark=e},async setGetOwnDateLoading(e){this.getOwnDateLoading=e},async setCurrentLaunchpadPoolInfo(e){this.currentLaunchpadPoolInfo=e},async setCurrentTab(e){this.currentTab=e},async setCurrentPoolNumData(e){this.currentPoolNumData=e},async setOwnIsWhiteList(e){this.ownIsWhiteList=e},async setMyCountCommittedCoinAsset(e){this.committedCoinAssetCount=e},async setLaunchpadPoolsLoading(e){this.launchpadPoolsLoading=e},async setLaunchpadAllPools(){this.launchpadAllPools=[],this.setLaunchpadPoolsLoading(!0);const r=await p("Sui").getLaunchpadAllPools()||[];this.launchpadAllPools=r.sort((n,s)=>s.activity_end_time-n.activity_end_time),this.setLaunchpadPoolsLoading(!1)},async setLaunchpadAllPoolsNoLoading(){const r=await p("Sui").getLaunchpadAllPools()||[];this.launchpadAllPools=r.sort((n,s)=>s.activity_end_time-n.activity_end_time)},async getCurrentLaunchpadPoolInfo(e){this.setGetPurchaseAmountLoading(!0);const r=p("Sui"),n=await r.getLaunchpadPoolInfo(e)||{},s=await r.getCoinInfo(n.coin_type_raise,n.coin_type_sale);this.currentLaunchpadPoolInfo={raiseCoinInfo:{logoURI:s[n.coin_type_raise].logo_url,...s[n.coin_type_raise]},saleCoinInfo:{logoURI:s[n.coin_type_sale].logo_url,...s[n.coin_type_sale]},...n},this.setGetOwnDateLoading(!1)},async getCurrentLaunchpadPoolInfoNoLoading(e){const r=p("Sui"),n=await r.getLaunchpadPoolInfo(e)||{},s=await r.getCoinInfo(n.coin_type_raise,n.coin_type_sale);this.currentLaunchpadPoolInfo={raiseCoinInfo:{logoURI:s[n.coin_type_raise].logo_url,...s[n.coin_type_raise]},saleCoinInfo:{logoURI:s[n.coin_type_sale].logo_url,...s[n.coin_type_sale]},...n}},async setLaunchpadJoinPools(e){this.setLaunchpadPoolsLoading(!0);const n=await p("Sui").getJoinPools(e)||[];n.length<1?this.setLaunchpadPoolsLoading(!1):(this.launchpadJoinPools=n.sort((s,a)=>a.activity_end_time-s.activity_end_time),this.setLaunchpadPoolsLoading(!1))},async setLaunchpadOwnerAllPools(e,r){const s=await p("Sui").getOwnerPools(e,r)||[];s.length<1?this.haveLaunchpad=!1:(this.launchpadOwnerAllPools=s.sort((a,g)=>g.activity_end_time-a.activity_end_time),this.haveLaunchpad=!0)},async getIdoPoolConfigInfo(){const r=await p("Sui").getPoolConfigs(),n={};r.map((s,a)=>{n[s.pool_address]=s}),this.idoPoolConfigInfo=n||{}}}});export{p as a,nt as u};
