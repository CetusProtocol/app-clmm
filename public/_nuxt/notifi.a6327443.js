import{eY as H,T as L,L as r,U as I}from"./entry.7dbcdae4.js";import{n as O,a as D}from"./index.b7569565.js";import{_ as x,w as C}from"./common.ce6f3df4.js";const U=H("notifi",{state:()=>({client:null,status:"",targetGroups:null,sourceGroups:{},alerts:null,allSources:[],notifiLoading:!1}),actions:{setClient(e){this.client=e},async initNotifi(e,t){const i="cetus",s=x.Aptos.notifiEnv||"",n=O({address:e,publicKey:t},i,s),a=D(n);this.client=a;const l=await a.initialize();this.status=(l==null?void 0:l.status)||"",(l==null?void 0:l.status)==="authenticated"&&(this.getAlerts(),this.getTargetGroups(),this.getNotificationHistory())},async login(e,t){try{if(this.notifiLoading=!0,await this.client.logIn({walletBlockchain:"APTOS",signMessage:async(s,n)=>(await e.value.currentWallet.signMessage({address:!0,message:s,nonce:`${n}`})).signature})){const s=e.value.currentWallet.publicAccount,n=s.address,a=s.publicKey;await this.initNotifi(n,a),this.ensureTargetGroup({...t})}}catch{this.notifiLoading=!1;const{$notify:s}=L();s.error({icon:r("svg",{class:{icon:!0},"aria-hidden":!0},[r("use",{"xlink:href":"#icon-a-icon-Shutdown"})]),message:r("div",{class:"notification-title"},[r("span",{innerHTML:"Login"+I.global.t("newAdd.failed")},null)]),description:"There was an error login notifi",duration:4.5,class:"ant-notification-copy ant-notification-error"})}},async getTargetGroups(){const e=await this.client._service.getTargetGroups(),t=e==null?void 0:e.targetGroup.filter(i=>i.name==="Default");this.targetGroups=t},async getSourceGroups(){const e=await this.client._service.getSourceGroups(),t=e==null?void 0:e.sourceGroup.filter(i=>i.name==="position");this.sourceGroups=t},async getAlerts(){const e=await this.client._service.getAlerts(),t=e==null?void 0:e.alert.filter(i=>i.name==="position");t&&t[0]&&t[0].targetGroup&&(this.targetGroups=[t[0].targetGroup]),this.alerts=t},async fetchInternalData(){const[e,t,i,s,n,a,l]=await Promise.all([this.client._service.getAlerts(),this.client._service.getSources(),this.client._service.getSourceGroups(),this.client._service.getTargetGroups(),this.client._service.getEmailTargets(),this.client._service.getSmsTargets(),this.client._service.getTelegramTargets()]),p=new Set,h=[];return t.source&&t.source.flatMap(u=>(u==null?void 0:u.applicableFilters)??[]).forEach(u=>{p.has(u.id)||(h.push(u),p.add(u.id))}),{alerts:e,filters:h,sources:t,sourceGroups:i,targetGroups:s,emailTargets:n,smsTargets:a,telegramTargets:l}},async ensureEmailTarget(e){var s;const t=await this.client._service.getEmailTargets(),i=(s=t==null?void 0:t.emailTarget)==null?void 0:s.find(n=>{var a;return((a=n.emailAddress)==null?void 0:a.toLowerCase())===e.toLowerCase()});if(i!==void 0)return i;{let n;try{n=await this.client._service.createEmailTarget({name:e,value:e})}catch{}return n==null?void 0:n.createEmailTarget}},async ensureSmsTarget(e){const i=(await this.client._service.getSmsTargets()).smsTarget.find(s=>s.name===e);if(i!==void 0)return i;{const s=await this.client._service.createSmsTarget({name:e,value:e});return s==null?void 0:s.createSmsTarget}},async ensureTelegramTarget(e){const i=(await this.client._service.getTelegramTargets()).telegramTarget.find(s=>{var n;return((n=s.telegramId)==null?void 0:n.toLowerCase())===e.toLowerCase()});if(i!==void 0)return i;{let s;try{s=await this.client._service.createTelegramTarget({name:e,value:e})}catch{}return s==null?void 0:s.createTelegramTarget}},async ensureTargetGroup(e){this.notifiLoading=!0;const{$notify:t}=L();try{const{emailAddress:i,phoneNumber:s,telegramId:n}=e,a="Default",l=i?(await this.ensureEmailTarget(i)).id:null,p=s?(await this.ensureSmsTarget(s)).id:null,h=n?(await this.ensureTelegramTarget(n)).id:null,u=l!==null?[l]:[],T=p!==null?[p]:[],v=h!==null?[h]:[],d=await this.client._service.getTargetGroups(),f=d==null?void 0:d.targetGroup.find(o=>o.name==="Default");let S=!1;if(f===void 0||f.id===null){const o=await this.client._service.createTargetGroup({name:a,emailTargetIds:u,smsTargetIds:T,telegramTargetIds:v,webhookTargetIds:[]});o!=null&&o.createTargetGroup&&(this.targetGroups=[o==null?void 0:o.createTargetGroup],S=!0)}else if(!C(f.emailTargets.map(o=>o.id),u)||!C(f.smsTargets.map(o=>o.id),T)||!C(f.telegramTargets.map(o=>o.id),v)){const o=await this.client._service.updateTargetGroup({id:f.id,name:a,emailTargetIds:u,smsTargetIds:T,telegramTargetIds:v,webhookTargetIds:[]});o!=null&&o.updateTargetGroup&&(this.targetGroups=[o==null?void 0:o.updateTargetGroup],S=!0)}else this.notifiLoading=!1;S&&(t.success({icon:r("svg",{class:{icon:!0},"aria-hidden":!0},[r("use",{"xlink:href":"#icon-icon-change1"})]),message:r("div",{class:"notification-title"},[r("span",{innerHTML:"Settings Updated "+I.global.t("newAdd.success")},null)]),description:r("div",{class:"notification-title"},[r("div",{class:"notification-text",innerHTML:"Your subscription settings have been updated."},null)]),duration:4.5,class:"ant-notification-copy ant-notification-swap"}),this.notifiLoading=!1)}catch{this.notifiLoading=!1,t.error({icon:r("svg",{class:{icon:!0},"aria-hidden":!0},[r("use",{"xlink:href":"#icon-a-icon-Shutdown"})]),message:r("div",{class:"notification-title"},[r("span",{innerHTML:"Updated "+I.global.t("newAdd.failed")},null)]),description:"There was an error updating your settings",duration:4.5,class:"ant-notification-copy ant-notification-error"})}},async createSourceGroup(){await this.client._service.createSourceGroup({name:"position",sourceIds:[]})},getDirectPushFilter(e){var n;const t=e==null?void 0:e.find(a=>a!==void 0&&a.type==="DIRECT_PUSH");if(t===void 0)throw new Error("Failed to identify direct push source");const i=(n=t.applicableFilters)==null?void 0:n.find(a=>(a==null?void 0:a.filterType)==="DIRECT_TENANT_MESSAGES");if(i===void 0)throw new Error("Failed to retrieve filter");return{filter:i,filterOptions:{directMessageType:"alarm"}}},async getSources(){const e=await this.client._service.getSources();e!=null&&e.source&&(this.allSources=e==null?void 0:e.source)},async createSource(e,t){const i=JSON.stringify(e);await this.client._service.createSource({type:"DIRECT_PUSH",name:t,blockchainAddress:i})},async deleteSource(e){const t={query:`mutation deleteSource($sourceId: String) {
  deleteSource(sourceId: $sourceId) {
    ...SourceFragment
  }
}

fragment SourceFragment onSource {
  id
  name
  type
  blockchainAddress
  applicableFilters {
    ...FilterFragment
}
}

fragment FilterFragment on Filter {
  id
  name
  filterType
}`,variables:{sourceId:e},operationName:"deleteSource"};await $fetch(x.Aptos.notifiRpcUrl,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.client._service._jwt},body:JSON.stringify(t)}),this.getSourceGroups()},async subscribePosition(e,t,i=!0,s=!0){var a,l,p,h,u,T,v;const{$notify:n}=L();try{const[d,f,S,o]=await Promise.all([await this.client._service.getSources(),await this.client._service.getAlerts(),await this.client._service.getTargetGroups(),await this.client._service.getSourceGroups()]),F=JSON.stringify(e),k=(a=d==null?void 0:d.source)==null?void 0:a.find(c=>c.name===t&&c.blockchainAddress===F);let y=null;if(k)y=k;else{const c=await this.client._service.createSource({type:"DIRECT_PUSH",name:t,blockchainAddress:F});y=c==null?void 0:c.createSource}const m=o.sourceGroup.filter(c=>c.name==="position");let _=null;if(m&&m.length<1){const c=await this.client._service.createSourceGroup({name:"position",sourceIds:[y.id]});_=c==null?void 0:c.createSourceGroup}else{const c=(l=m[0])==null?void 0:l.sources.map(g=>g.id);if(c.find(g=>g===y.id)){const g=c.filter(E=>E!==y.id),G=await this.client._service.updateSourceGroup({id:(p=m[0])==null?void 0:p.id,name:(h=m[0])==null?void 0:h.name,sourceIds:g});_=G==null?void 0:G.updateSourceGroup}else{const g=await this.client._service.updateSourceGroup({id:(u=m[0])==null?void 0:u.id,name:(T=m[0])==null?void 0:T.name,sourceIds:[...c,y.id]});_=g==null?void 0:g.updateSourceGroup}}const N=(v=f==null?void 0:f.alert)==null?void 0:v.find(c=>{var w;return((w=c.name)==null?void 0:w.toLowerCase())==="position"});let P=null;if(N)P=N;else{const c={type:"directPush",name:"position",directPushId:{type:"value",value:"alarm"}},w=S.targetGroup.filter(E=>E.name==="Default"),g=this.getDirectPushFilter(d==null?void 0:d.source),G=await this.client._service.createAlert({name:c.name,sourceGroupId:_.id,filterId:g.filter.id,targetGroupId:w[0].id,filterOptions:g.filterOptions?JSON.stringify(g.filterOptions):"{}",groupName:"managed"})}let A="",b="";i?(A="Subscribed to Alerts!",b="Verify your notification channels to receive alerts when the price goes out of range. To edit your alert settinngs, click the bell icon in the top nav."):(A="Unsubscribed.",b="You'll no longer receive alerts when the price goes out of range."),s&&n.success({icon:r("svg",{class:{icon:!0},"aria-hidden":!0},[r("use",{"xlink:href":"#icon-icon-change1"})]),message:r("div",{class:"notification-title"},[r("span",{innerHTML:A},null)]),description:r("div",{class:"notification-title"},[r("div",{class:"notification-text",innerHTML:b},null)]),duration:4.5,class:"ant-notification-copy ant-notification-swap"}),await this.getSourceGroups(),setTimeout(()=>{this.getAlerts()},2e3)}catch{n.error({icon:r("svg",{class:{icon:!0},"aria-hidden":!0},[r("use",{"xlink:href":"#icon-a-icon-Shutdown"})]),message:r("div",{class:"notification-title"},[r("span",{innerHTML:"Updated"+I.global.t("newAdd.failed")},null)]),description:`There was an error ${i?"subscribe":"unsubscribe"} alert`,duration:4.5,class:"ant-notification-copy ant-notification-error"})}},async sendEmailTargetVerificationRequest(e){const t={query:`fragment emailTargetFragment on EmailTarget {
  emailAddress
  id
  isConfirmed
  name
}
mutation sendEmailTargetVerificationRequest(
  $targetId: String!
) {
  sendEmailTargetVerificationRequest(sendTargetConfirmationRequestInput:{
    targetId: $targetId
  }) {
    ...emailTargetFragment
  }
}`,variables:{targetId:e}};await $fetch(x.Aptos.notifiRpcUrl,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.client._service._jwt},body:JSON.stringify(t)})},async getNotificationHistory(){await this.client.getNotificationHistory()}}});export{U as u};
