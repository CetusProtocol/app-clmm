import{p as d,a as m,D as w,s as g,M as p}from"./pool.05960e4b.js";import{u as c}from"./useWhale.09d14315.js";import{a1 as v}from"./entry.37ac1515.js";import{c as C}from"./sha256.bc212f92.js";const I=v("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",newPendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},newPendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(t){const n=c("Sui");try{const e=await n.getOwnerVeNFT(t);e?(this.venft_id=e.id,this.xWhaleBalance=d(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0")}catch{this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0"}},async getVeNFTDividendInfo(){const t=c("Sui"),n=m("Sui");try{const e=await t.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),r=await t.getPeriod(this.dividendManagerInfo),h=await n.getTokenList(),l=[];if(e&&e.rewards&&e.rewards.length>0){for(let i=0;i<e.rewards.length;i++)if(e.rewards[i].period<r){const a=e.rewards[i].rewards;for(let o=0;o<a.length;o++){const s=a[o];l.push({...s})}}if(l&&l.length>0){const i={};for(let o=0;o<l.length;o++){const s=l[o];if(i[s.coin_type])i[s.coin_type].amount=new w(i[s.coin_type].amount).add(new w(s.amount)).toString();else{let u=h.filter(f=>f.address==s.coin_type)[0];u||(u=(await n.getTokenListByCoinType([s.coin_type]))[0]),i[s.coin_type]={...s,...u}}}const a=Object.values(i);this.pendingCoinInfo=a[0],this.pendingAmount=g(d(a[0].amount,a[0].decimals),6),this.newPendingCoinInfo=a&&a.length>1?a[1]:{},this.newPendingAmount=a&&a.length>1?g(d(a[1].amount,a[1].decimals),6):0}}else{const i=await t.getPhaseDividendInfo(this.dividendManagerInfo),a=p(i.bonus_types[0],!1);let o=h.filter(s=>s.address==a)[0];o||(o=(await n.getTokenListByCoinType([a]))[0]),this.newPendingCoinInfo=o,this.pendingAmount="0",this.newPendingAmount="0"}}catch{this.pendingAmount="0",this.newPendingAmount="0"}},async getDividendManager(){const n=await c("Sui").getDividendManager();this.nextStartTime=n.nextStartTime,this.dividendManagerInfo=n,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(t){const e=await c("Sui").getOwnerCetusCoins(t);if(e&&e.length>0){let r=new w(0);e.forEach(h=>{r=r.add(d(h.balance.toString(),9))}),this.whaleBalance=r}else this.whaleBalance="0"},async getOwnerLockCetuss(t){const r=(await c("Sui").getOwnerLockCetuss(t)).sort((h,l)=>h.locked_until_time-l.locked_until_time);this.ownerLocks=r,this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const n=await c("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);this.availableXwhale=d(n,9),this.redeemingXwhale=this.xWhaleBalance!=="--"?new w(this.xWhaleBalance).sub(new w(this.availableXwhale)).toString():"--"},async getMyShare(t){const e=await c("Sui").getMyShare(t);this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e},async getXcetusApr(){const{data:t}=await fetch(`${C.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),n=t.apr&&t.apr.replace("%","");this.cetusApr=Number(n)>0&&Number(n)<.01?"<0.01":n},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--"},setClaimLoading(t){this.claimLoading=t}}});export{I as u};
