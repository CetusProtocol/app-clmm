import{u as p,p as w,e as v,Z as x,s as S,_ as C}from"./pool.cfb802f1.js";import{u as d}from"./useWhale.6c9993bb.js";import{a7 as b}from"./entry.c1391071.js";import{c as m}from"./sha256.ea46fa38.js";import{D as r}from"./decimal.0bdeb344.js";const X=b("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",newPendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},newPendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{},rewardCoin:{},rewardCoinAmount:"--",xcetusRewardList:[]}),getters:{getPoolStore(){return p()}},actions:{async getOwnerVeNFT(a){const t=d("Sui");try{const e=await t.getOwnerVeNFT(a);e?(this.venft_id=e.id,this.xWhaleBalance=w(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0",this.newPendingAmount="0")}catch{this.xWhaleBalance="--",this.availableXwhale="--",this.redeemingXwhale="--",this.pendingAmount="--",this.newPendingAmount="--"}},async getVeNFTDividendInfo(){const a=d("Sui"),t=v("Sui");try{const e=await a.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo),i=await a.getPeriod(this.dividendManagerInfo),c=await t.getTokenList(),l=[];if(e&&e.rewards&&e.rewards.length>0){for(let o=0;o<e.rewards.length;o++)if(e.rewards[o].period<i){const h=e.rewards[o].rewards;for(let n=0;n<h.length;n++){const s=h[n];Number(s.amount)>0&&l.push({...s})}}if(l&&l.length>0){const o={};for(let n=0;n<l.length;n++){const s=l[n];if(o[s.coin_type])o[s.coin_type].amount=new r(o[s.coin_type].amount).add(new r(s.amount)).toString();else{let u=c.filter(g=>x(g.address,s.coin_type))[0];u||(u=(await t.getTokenListByCoinType([s.coin_type]))[0]),o[s.coin_type]={...s,...u}}}const h=Object.values(o).map(n=>({...n,amount:S(w(n.amount,n.decimals),6)}));this.xcetusRewardList=h}else this.xcetusRewardList=[]}else this.xcetusRewardList=[]}catch{this.xcetusRewardList=[]}},async getDividendManager(){const t=await d("Sui").getDividendManager();this.nextStartTime=t.nextStartTime,this.dividendManagerInfo=t,this.getVeNFTDividendInfo()},async getAccountWhaleBalance(a){const e=await d("Sui").getOwnerCetusCoins(a);if(e&&e.length>0){let i=new r(0);e.forEach(c=>{i=i.add(w(c.balance.toString(),9))}),this.whaleBalance=i}else this.whaleBalance="0"},async getOwnerLockCetuss(a){const i=(await d("Sui").getOwnerLockCetuss(a)).sort((c,l)=>c.locked_until_time-l.locked_until_time);this.ownerLocks=i,this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const t=await d("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);this.availableXwhale=w(t,9),this.redeemingXwhale=this.xWhaleBalance!=="--"?new r(this.xWhaleBalance).sub(new r(this.availableXwhale)).toString():"0"},async getMyShare(a){const t=d("Sui");try{const e=await t.getMyShare(a);e?this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e:this.xcetusShare="0"}catch{this.xcetusShare=""}},async getXcetusApr(){try{const a=d("Sui"),t=await a.getPhaseDividendInfo(this.dividendManagerInfo);if(t&&t.bonus&&t.bonus.length>0){const{tokensObj:e,RATES:i}=this.getPoolStore;let c=new r(0);t.bonus.forEach(n=>{const s=n.name=="0000000000000000000000000000000000000000000000000000000000000002::sui::SUI"?"0x2::sui::SUI":C(n.name,!1),u=e[s].decimals,g=i[s].price,f=new r(n.value).mul(new r(g)).div(new r(Math.pow(10,u)));c=c.add(f)});const{treasury:l}=await a.getXcetusManager(),o=i[m.Sui.xcetusTokenAddress].price,h=c.div(7).mul(365).div(new r(l).mul(o).div(Math.pow(10,9))).toNumber()*100;this.cetusApr=Number(h)>0&&Number(h)<.01?"<0.01":h}}catch{const{data:t}=await fetch(`${m.Sui.api}/v2/sui/storm/dividend_rewards`).then(i=>i.json()),e=t.apr&&t.apr.replace("%","");this.cetusApr=Number(e)>0&&Number(e)<.01?"<0.01":e}},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--",this.xcetusRewardList=[]},setClaimLoading(a){this.claimLoading=a}}});export{X as u};
