import{_ as C,S as D,j as B,ao as f,s as y,D as u,c as F,p as v,b as R}from"./pool.198d758c.js";import{$ as W,m as P,L as V,a0 as j}from"./entry.741d2d78.js";function l(s){const o={fullRpcUrl:localStorage.getItem(`${s}-currentRpc`)||C[s||"Sui"].fullRpcUrl,faucetURL:localStorage.getItem(`${s}-currentRpc`)||C[s||"Sui"].faucetURL,simulationAccount:C[s||"Sui"].simulationAccount,xcetus:C[s||"Sui"].xcetus},e=W(new D(o)),r=B(),c=P(()=>r);V(()=>{c.value.address&&(e.senderAddress=c.value.address)});const d=async t=>await e.XCetusModule.getOwnerLockCetuss(t),g=async(t,n)=>f.getAvailableXCetus(t,n),m=async t=>await e.XCetusModule.getOwnerCetusCoins(t),S=async t=>await e.XCetusModule.getOwnerVeNFT(t),h=async(t,n)=>{const a={amount:t};n&&(a.venft_id=n);const i=await e.XCetusModule.convertPayload(a);return w(i)},p=async()=>{const t=await e.XCetusModule.mintVeNFTPayload();return w(t)},X=async(t,n)=>{const a=await e.XCetusModule.redeemNum(t,n);return{amountOut:a.amountOut,percent:y(new u(a.percent).mul(new u(100)).toString(),2)}},x=async(t,n)=>{const a=await e.XCetusModule.reverseRedeemNum(t,n);return{amountOut:a.amountOut,percent:y(new u(a.percent).mul(new u(100)).toString(),2)}},M=async(t,n,a)=>{const i=await e.XCetusModule.redeemLockPayload({venft_id:n,amount:t,lock_day:a});return w(i)},b=t=>f.getLockingCetuss(t),k=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&f.isLocked(a)){const i=e.XCetusModule.cancelRedeemPayload({venft_id:n,lock_id:t});return w(i)}},L=async(t,n)=>{const a=await e.XCetusModule.getLockCetus(t);if(a&&!f.isLocked(a)){const i=await e.XCetusModule.redeemPayload({venft_id:n,lock_id:t});return w(i)}},T=t=>{const n=Date.now()/1e3,{start_time:a,interval_day:i}=t,O=Math.ceil((n-a)/(i*24*3600));return a+O*i*24*3600},N=async()=>{const t=await e.XCetusModule.getDividendManager();return{nextStartTime:T(t).toString(),...t}},_=async(t,n)=>{const a=await e.XCetusModule.getVeNFTDividendInfo(n.venft_dividends.id,t);return{rewards:a&&a.rewards||[]}},A=async t=>{const n=await e.XCetusModule.getDividendManager();if(n.bonus_types.length>0){const a=await e.XCetusModule.redeemDividendPayload(t,n.bonus_types);return w(a)}},I=async t=>{const n=await e.XCetusModule.getOwnerVeNFT(t);if(n){const a=await e.XCetusModule.getXcetusManager(),i=new u(n.xcetus_balance).div(a.treasury).mul(100).toString();return Number(i)>0&&Number(i)<.01?"<0.01":y(i,2)}else return 0},w=t=>({transactionBlock:t,options:{showEffects:!0,showEvents:!0,showInput:!0,showRawInput:!0,showObjectChanges:!0,showBalanceChanges:!0}});return{getOwnerLockCetuss:d,getOwnerCetusCoins:m,getOwnerVeNFT:S,depositCetus:h,getMintVeNFTPayload:p,redeemNum:X,getRedeemLockPayload:M,getAvailableXCetus:g,getLockingCetuss:b,getCancelRedeemPayload:k,getVeNFTDividendInfo:_,reverseRedeemNum:x,getRedeemPayload:L,getRedeemDividendPayload:A,getMyShare:I,getDividendManager:N}}const K=j("xcetus",{state:()=>({venft_id:"",xWhaleBalance:"--",venftInfo:{},pendingAmount:"--",whaleBalance:"--",ownerLocks:[],availableXwhale:"--",redeemingXwhale:"--",nextStartTime:"",xcetusShare:"--",pendingCoinInfo:{},cetusApr:"",claimLoading:"",dividendManagerInfo:{}}),actions:{async getOwnerVeNFT(s){const o=l("Sui");try{const e=await o.getOwnerVeNFT(s);e&&!F(e)?(this.venft_id=e.id,this.xWhaleBalance=v(e.xcetus_balance,9),this.venftInfo={id:e.id,type:e.type,index:e.index,xcetus_balance:e.xcetus_balance},this.getVeNFTDividendInfo()):(this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0")}catch{this.xWhaleBalance="0",this.availableXwhale="0",this.redeemingXwhale="0",this.pendingAmount="0"}},async getVeNFTDividendInfo(){const s=l("Sui"),o=R("Sui");try{const e=await s.getVeNFTDividendInfo(this.venft_id,this.dividendManagerInfo);let r=0;if(e&&e.rewards){for(let c=0;c<e.rewards.length;c++){const d=e.rewards[c].rewards;for(let g=0;g<d.length;g++){const m=d[g];let h=(await o.getTokenList()).filter(p=>p.address==m.coin_type)[0];h||(h=(await o.getTokenListByCoinType([m.coin_type]))[0]),this.pendingCoinInfo=h,r+=Number(v(m.amount,h.decimals))}}this.pendingAmount=y(r,6)}else this.pendingAmount="0"}catch{this.pendingAmount="0"}},async getDividendManager(){const o=await l("Sui").getDividendManager();this.nextStartTime=o.nextStartTime,this.dividendManagerInfo=o},async getAccountWhaleBalance(s){const e=await l("Sui").getOwnerCetusCoins(s);if(e&&e.length>0){let r=new u(0);e.forEach(c=>{r=r.add(v(c.balance.toString(),9))}),this.whaleBalance=r}else this.whaleBalance="0"},async getOwnerLockCetuss(s){const r=(await l("Sui").getOwnerLockCetuss(s)).sort((c,d)=>c.locked_until_time-d.locked_until_time);this.ownerLocks=r,this.setClaimLoading(""),this.getAvailableXCetus()},async getAvailableXCetus(){const o=await l("Sui").getAvailableXCetus(this.venftInfo,this.ownerLocks);this.availableXwhale=v(o,9),this.redeemingXwhale=this.xWhaleBalance!=="--"?new u(this.xWhaleBalance).sub(new u(this.availableXwhale)).toString():"--"},async getMyShare(s){const e=await l("Sui").getMyShare(s);this.xcetusShare=Number(e)>0&&Number(e)<.01?"<0.01":e},async getXcetusApr(){const{data:s}=await fetch(`${C.Sui.api}/v2/sui/storm/dividend_rewards`).then(e=>e.json()),o=s.apr&&s.apr.replace("%","");this.cetusApr=Number(o)>0&&Number(o)<.01?"<0.01":o},loginOut(){this.venft_id="",this.xWhaleBalance="--",this.venftInfo={},this.pendingAmount="--",this.whaleBalance="--",this.ownerLocks=[],this.availableXwhale="--",this.redeemingXwhale="--",this.xcetusShare="--"},setClaimLoading(s){this.claimLoading=s}}});export{l as a,K as u};
